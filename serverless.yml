service: crypto-scraper
frameworkVersion: '3'

useDotenv: true

plugins:
  - serverless-iam-roles-per-function

custom:
  tableName: 'cs-tokensTable-${opt:stage}'
  scraperName: 'cs-scraper-${opt:stage}'

provider:
  name: aws
  runtime: nodejs16.x
  stage: dev
  region: "${env:region, env:REGION, 'us-west-2'}"
  environment:
    TOKENS_TABLE_NAME: '${self:custom.tableName}'
    SCRAPER_FUNCTION_NAME: '${self:custom.scraperName}'
    REGION: ${env:region, env:REGION, 'us-west-2'}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:DeleteItem
      Resource: !GetAtt TokensDynamoDbTable.Arn

functions:
  post_tokens:
    name: 'cs-post-tokens-${opt:stage}'
    handler: src/api/tokens.postTokens
    iamRoleStatementsInherit: true
    events:
      - http:
          path: /tokens
          method: POST
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "lambda:InvokeFunction"
          - "lambda:InvokeAsync"
        Resource: !GetAtt ScraperLambdaFunction.Arn
  get_tokens:
    name: 'cs-get-tokens-${opt:stage}'
    handler: src/api/tokens.getTokens
    iamRoleStatementsInherit: true
    events:
      - http:
          path: /tokens
          method: GET
  delete_token:
    name: 'cs-delete-token-${opt:stage}'
    handler: src/api/tokens.deleteToken
    iamRoleStatementsInherit: true
    events:
      - http:
          path: /tokens/{id}
          method: DELETE
          request:
            parameters:
              paths:
                id: true
  get_token:
    name: 'cs-get-token-${opt:stage}'
    handler: src/api/tokens.getToken
    iamRoleStatementsInherit: true
    events:
      - http:
          path: /tokens/{id}
          method: GET
          request:
            parameters:
              paths:
                id: true
  scraper:
    name: '${self:custom.scraperName}'
    handler: src/lambda-functions/scraper.main
    iamRoleStatementsInherit: true
    events:
      - schedule: rate(${env:SCRAP_DELAY, 30} minutes)
    environment:
      # Here secrets can be used for production see https://www.serverless.com/blog/aws-secrets-management/
      COINLAYER_ACCESS_KEY: '${env:COINLAYER_ACCESS_KEY}'
      COINLAYER_ENDPOINT: '${env:COINLAYER_ENDPOINT}'

resources:
  Resources:
    TokensDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: tokenId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: tokenId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:custom.tableName}
